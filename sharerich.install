<?php

/**
 * @file
 * Install hooks for Sharerich project.
 */

/**
 * Implements hook_schema().
 */
function sharerich_schema() {
  $schema['sharerich_widgets'] = array(
    'description' => 'Stores information about Sharerich Widget.',
    'export' => array(
      'key' => 'machinename',
      'primary key' => 'swid',
      'identifier' => 'sharerich_widget', // Exports will be available as $sharerich
      'default hook' => 'default_sharerich_widget', // Function hook name.
      'api' => array(
        'owner' => 'sharerich',
        'api' => 'default_sharerich_widgets', // Base name for api include files.
        'minimum_version' => 1,
        'current_version' => 1,
      ),
      'load callback' => 'sharerich_widget_load',
    ),
    'fields' => array(
      'swid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        'no export' => TRUE, // Do not export database-only keys.
      ),
      'machinename' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "The widget's unique name.",
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => "The title that appears above the share buttons.",
      ),
      'block' => array(
        'type' => 'int',
        'default' => 0,
        'description' => 'If true, a block will be created in which to display this buttons set.',
      ),
      'services' => array(
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
        'description' => "Serialized array of enabled Services.",
      ),
    ),
    'primary key' => array('swid'),
    'unique keys' => array(
      'machinename' => array('machinename'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function sharerich_install() {
  if (libraries_load('rrssb')) {
    variable_set('sharerich_add_js', libraries_get_path('rrssb') . '/js/rrssb.min.js');
    variable_set('sharerich_add_css', libraries_get_path('rrssb') . '/css/rrssb.css' . PHP_EOL .
      drupal_get_path('module', 'sharerich') . '/css/sharerich.css'
    );
  }
}

/**
 * Implements hook_uninstall().
 */
function sharerich_uninstall() {

  drupal_uninstall_schema('sharerich_widgets');

  // Clean entity configurations.
  foreach (node_type_get_types() as $node) {
    variable_del('sharerich_node_' . $node->type);
  }

  // Clean all the rest.
  variable_del('sharerich_youtube_username');
  variable_del('sharerich_github_username');
  variable_del('sharerich_facebook_app_id');
  variable_del('sharerich_facebook_site_url');
  variable_del('sharerich_add_js');
  variable_del('sharerich_add_css');
  variable_del('sharerich_block_hashes');
}
