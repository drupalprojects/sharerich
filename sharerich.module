<?php

/**
 * @file
 * Module file for Sharerich.
 */
require_once('includes/sharerich.tokens.inc');

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_mymodule_presets API.
 */
function sharerich_ctools_plugin_api($owner, $api) {
  if ($owner == 'mymodule' && $api == 'default_sharerich_widgets') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 * 
 * Telling CTools that we want to define an 'export_ui' plugin.
 */
function sharerich_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_libraries_info().
 */
function sharerich_libraries_info() {
  return array(
    'rrssb' => array(
      'title' => 'Ridiculously Responsive Social Share Buttons',
      'vendor url' => 'http://kurtnoble.com/labs/rrssb/',
      'download url' => 'https://github.com/kni-labs/rrssb',
      'path' => '/',
      'files' => array(
        'js' => array(
          'js/rssb.min.js',
        ),
        'css' => array(
          'css/rrssb.css',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function sharerich_menu() {
  $items['admin/structure/sharerich/settings'] = array(
    'title' => 'Global Sharerich Settings',
    'type' => MENU_LOCAL_TASK,
    'description' => "Configure your site-wide Sharerich settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sharerich_admin_form'),
    'access arguments' => array('administer sharerich'),
    'file' => 'sharerich.admin.inc',
    'weight' => 5,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function sharerich_permission() {
  return array(
    'administer sharerich' => array(
      'title' => t('Administer Sharerich'),
      'description' => t('Permission to allow user to configure Sharerich.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function sharerich_theme() {
  return array(
    'sharerich_buttons' => array(
      'variables' => array(
        'title' => '',
        'item_list' => array(),
        'attributes' => array(),
      ),
      'path' => drupal_get_path('module', 'sharerich') . '/theme',
      'template' => 'sharerich-buttons',
    ),
    'sharerich_manage_services' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function sharerich_block_info() {

  $widgets = sharerich_widget_load_all();
  $blocks = array();
  $hashes = array();

  foreach ($widgets as $widget) {
    if (!$widget->block) {
      continue;
    }
    // Inspired from dfp module.
    // The block table chokes when the delta is more than 32 characters. To
    // solve this we create a hash of the machine name when needed.
    if (drupal_strlen($widget->machinename) >= 32) {
      $delta = md5($widget->machinename);
      $hashes[$delta] = $widget->machinename;
    }
    else {
      $delta = $widget->machinename;
    }

    $blocks[$delta]['info'] = t('Sharerich widget: @name', array('@name' => $widget->machinename));
    $blocks[$delta]['cache'] = DRUPAL_CACHE_PER_PAGE;
  }

  // Only save hashes if they have changed.
  $old_hashes = variable_get('sharerich_block_hashes', array());
  if ($hashes != $old_hashes) {
    variable_set('sharerich_block_hashes', $hashes);
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function sharerich_block_view($delta = '') {
  $block = array();

  // If this is 32, this should be an md5 hash.
  if (drupal_strlen($delta) == 32) {
    $hashes = variable_get('sharerich_block_hashes', array());
    if (!empty($hashes[$delta])) {
      $delta = $hashes[$delta];
    }
  }

  $widget = sharerich_widget_load($delta);
  $block['content'] = sharerich_get_buttons($widget, NULL);

  return $block;
}

/**
 * Returns markup with list of share buttons.
 */
function sharerich_get_buttons($sharerich_widget, $node = NULL) {
  // Create a unique $key in order to render all the whims.
  if (!is_null($node)) {
    $key = $node->nid;
  }
  else {
    $key = $sharerich_widget->machinename;
  }

  $buttons = &drupal_static(__FUNCTION__ . $key, array());
  if (empty($buttons) && !empty($sharerich_widget->services)) {
    foreach ($sharerich_widget->services as $service_name => $service) {
      if (empty($service['enabled'])) {
        continue;
      }

      $buttons[$service_name] = array(
        'data' => $service['markup'],
        'class' => array($service_name),
      );
    }

    // Allow other modules to alter the buttons markup.
    drupal_alter('sharerich_buttons', $buttons, $node);

    // Tokens replacements.
    foreach ($buttons as $key => $button) {
      $buttons[$key]['data'] = token_replace($button['data'], array('node' => $node));
    }
  }

  if (count($buttons) > 0) {
    // Create an item list for the button links.
    $item_list = array(
      '#theme' => 'item_list',
      '#items' => $buttons,
      '#type' => 'ul',
      '#attributes' => array(
        'class' => array('sharerich-buttons', 'rrssb-buttons', 'clearfix'),
      ),
    );
    // Output using the sharerich_buttons theme.
    $sharerich_buttons = array(
      '#theme' => 'sharerich_buttons',
      '#item_list' => $item_list,
      '#title' => !empty($sharerich_widget->title) ? $sharerich_widget->title : FALSE,
    );
    return $sharerich_buttons;
  }
}

/**
 * Process the sharerich buttons.
 */
function template_process_sharerich_buttons(&$vars) {
  
}

/**
 * Implements hook_sharerich_buttons_alter().
 */
function hook_sharerich_buttons_alter(&$buttons) {
  
}

/**
 * Helper to load services from the disk.
 */
function sharerich_load_service($service_name) {
  $dir = drupal_get_path('module', 'sharerich') . '/services';
  $service_name = $dir . '/' . $service_name . '.inc';
  if (file_exists($service_name)) {
    return file_get_contents($service_name);
  }
  return FALSE;
}

/**
 * Helper to get the service content from file or ctools object.
 */
function sharerich_get_service_content($service_name, $widget_name = '') {

  $sharerich_widget = sharerich_widget_load($widget_name);
  $service_identifier = 'sharerich_' . $service_name;

  if (!empty($sharerich_widget->services[$service_identifier]['markup'])) {
    return $sharerich_widget->services[$service_identifier]['markup'];
  }

  // On new widget creation.
  return sharerich_load_service($service_name);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sharerich_form_node_type_form_alter(&$form, &$form_state) {
  $form['sharerich'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sharerich'),
    '#collapsible' => TRUE,
    '#group' => 'additional_settings',
    '#weight' => 20,
    '#attributes' => array(
      'class' => array('sharerich-node-type-settings-form'),
    ),
    '#access' => user_access('administer nodes'),
  );
  $entity_type = $form['#node_type']->type;
  $form['sharerich']['show'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Sharerich for this content type.'),
    '#default_value' => variable_get('sharerich_node_' . $entity_type, FALSE),
    '#suffix' => t('After enabling Sharerich you need to configure each'
      . ' display on Manage display tag.<br/>Widgets are located '
      . '<a href="@url">here</a>.', array(
      '@url' => url('admin/structure/sharerich/list')
      )
    ),
  );
  $form['#submit'][] = 'sharerich_node_type_callback';
}

/**
 * Custom handler to save sharerich info.
 */
function sharerich_node_type_callback(&$form, &$form_state) {
  $entity_type = $form['#node_type']->type;
  $var_name = 'sharerich_node_' . $form_state['values']['type'];
  $var_get = variable_get($var_name);
  $form_value = $form_state['complete form']['sharerich']['show']['#value'];
  // When Sharerich is enabled for the first time on this content type,
  // redirect to the display settings.
  if (empty($var_get) && $form_value == TRUE) {
    drupal_set_message(t('Please configure the field Sharerich for each Display.'));
    $form_state['redirect'] = 'admin/structure/types/manage/' . $entity_type . '/display';
  }
  variable_set($var_name, $form_value);
  field_info_cache_clear();
}

/**
 * Implements hook_node_view().
 */
function sharerich_node_view($node, $view_mode, $langcode) {
  $extra = sharerich_field_extra_fields();

  // Check that we're supporting the node type being viewed.
  if (empty($extra['node'][$node->type]['display'])) {
    return;
  }

  $config = field_bundle_settings('node', $node->type);

  // Check for widget setup.
  if (empty($config['extra_fields']['display']['sharerich']['default']['settings']['sharerich_widgets'])) {
    return;
  }

  $sharerich_widget_machinename = $config['extra_fields']['display']['sharerich']['default']['settings']['sharerich_widgets'];
  $sharerich_widget = sharerich_widget_load($sharerich_widget_machinename);

  // Check for widget existence.
  if (!$sharerich_widget) {
    return;
  }

  foreach ($extra['node'][$node->type]['display'] as $field_name => $field_info) {
    // Check to make sure this field is visible in this view mode.
    $displays = &$config['extra_fields']['display'][$field_name];
    if (isset($displays['default']) && !isset($displays['full'])) {
      // Fallback for Default display when viewing full view node.
      $displays['full'] = $displays['default'];
    }
    if (isset($displays[$view_mode]) && $displays[$view_mode]['visible'] == FALSE) {
      continue;
    }
    if ($field_name == 'sharerich') {
      $node->content['sharerich'] = sharerich_get_buttons($sharerich_widget, $node);
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 * 
 * @param bool $get_defaults
 *    Set TRUE to return default confs.
 * @return array
 */
function sharerich_field_extra_fields($get_defaults = FALSE) {
  $extra = array();

  $defaults = array(
    'display' => array(
      'sharerich' => array(
        'label' => t('Sharerich'),
        'description' => t('This is a extra field, you can configure it on each Display.'),
        'weight' => 100,
        'visible' => TRUE,
        'settings' => array(
          'sharerich_widgets' => 0,
        ),
      ),
    )
  );

  foreach (node_type_get_types() as $node) {
    if (variable_get('sharerich_node_' . $node->type, FALSE)) {
      $extra['node'][$node->type] = $defaults;
    }
  }

  if (!$get_defaults) {
    return $extra;
  }
  else {
    return array('extra_fields' => $defaults);
  }
}

/**
 * Implements hook_page_build().
 */
function sharerich_page_build() {

  if (path_is_admin(current_path())) {
    return;
  }

  // Add CSS from the configuration page.
  $css = explode('|', preg_replace('/(\r\n?|\n)/', '|', variable_get('sharerich_add_css')));
  foreach ($css as $key => $url) {
    if (empty($url)) {
      continue;
    }

    if (stripos($url, 'http') !== FALSE) {
      drupal_add_css($url, 'external');
    }
    else {
      drupal_add_css($url);
    }
  }

  // Add Js from the configuration page.
  $js = explode('|', preg_replace('/(\r\n?|\n)/', '|', variable_get('sharerich_add_js')));
  foreach ($js as $key => $url) {
    if (!empty($url)) {
      if (stripos($url, 'http') !== FALSE) {
        drupal_add_js($url, 'external');
      }
      else {
        drupal_add_js($url, array('scope' => 'footer'));
      }
    }
  }

  // Backwards compatibility to jQuery.live.
  $js = 'if (typeof(jQuery.on) != "function") {
          jQuery.fn.extend({
            on: function(event, callback) {
              return this.live(event, callback);
            }
          })
         }';
  drupal_add_js($js, array('type' => 'inline', 'scope' => 'header'));
}

/**
 * Implements hook_google_analytics_et_api().
 */
function sharerich_google_analytics_et_api() {
  $selectors = array(
    array(
      'event' => 'mousedown',
      'selector' => '.sharerich-buttons li',
      'category' => 'Share Button',
      'action' => '!text',
      'label' => '!currentPage',
      'value' => 0,
      'noninteraction' => FALSE,
    ),
  );
  return $selectors;
}

/**
 * Load function.
 *
 * @param string $machinename
 *
 * @return object
 */
function sharerich_widget_load($machinename) {

  ctools_include('export');

  $tags = &drupal_static(__FUNCTION__, array());

  if (!isset($tags[$machinename])) {
    // Load the tag.
    $result = ctools_export_load_object('sharerich_widgets', 'names', array($machinename));
    if (isset($result[$machinename])) {
      $tag = $result[$machinename];
    }
    else {
      return NULL;
    }

    // Store the original tag. This is used by the tag edit form.
    $tag->raw = clone $tag;

    // Allow modules to alter the raw tag object.
    drupal_alter('sharerich_widget_load', $tag);

    // Configure this tag based on the defined settings.
    $tag->wrapper_id = 'sharerich-widget-' . $tag->machinename . '-wrapper';
    $tag->placeholder_id = 'sharerich-widget-' . $tag->machinename;
    // Allow modules to alter the fully-loaded tag object.
    drupal_alter('sharerich_widget', $tag);

    // Statically cache the fully loaded tag.
    $tags[$machinename] = $tag;
  }
  else {
    // Use the statically cached tag object.
    $tag = $tags[$machinename];
  }

  return $tag;
}

/**
 * Load all sharerich widgets.
 *
 * @param boolean $include_disabled
 *
 * @return array of tags.
 */
function sharerich_widget_load_all($include_disabled = FALSE) {
  ctools_include('export');

  $tags = ctools_export_crud_load_all('sharerich_widgets');
  foreach ($tags as $key => $tag) {
    if (!$include_disabled && isset($tag->disabled) && $tag->disabled) {
      unset($tags[$key]);
    }
  }

  return $tags;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * 
 * Add configuration form for sharerich field extras.
 */
function sharerich_form_field_ui_display_overview_form_alter(&$form, &$form_state, $form_id) {

  // Modified part copy from field_ui_display_overview_form() at /modules/field_ui/field_ui.admin.inc
  // Base button element for the various formatter settings actions.
  $base_button = array(
    '#submit' => array('field_ui_display_overview_multistep_submit'),
    '#ajax' => array(
      'callback' => 'field_ui_display_overview_multistep_js',
      'wrapper' => 'field-display-overview-wrapper',
      'effect' => 'fade',
    ),
    '#field_name' => 'sharerich',
  );

  $summary = isset($form_state['formatter_settings']['sharerich']) ? $form_state['formatter_settings']['sharerich'] : NULL;
  if ($form_state['formatter_settings_edit'] == 'sharerich') {

    $form['fields']['sharerich']['#region_callback'] = 'field_ui_display_overview_row_region';
    $form['fields']['sharerich']['format']['#cell_attributes'] = array('colspan' => 3);
    $form['fields']['sharerich']['format']['settings_edit_form'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('field-formatter-settings-edit-form')),
      '#parents' => array('fields', 'sharerich', 'settings_edit_form'),
      'label' => array(
        '#markup' => t('Format settings:') . ' <span class="formatter-name">' . t('Sharerich') . '</span>',
      ),
      'settings' => sharerich_field_formatter_settings_form($form, $summary),
      'actions' => array(
        '#type' => 'actions',
        'save_settings' => $base_button + array(
        '#type' => 'submit',
        '#name' => 'sharerich_formatter_settings_update',
        '#value' => t('Update'),
        '#op' => 'update',
        ),
        'cancel_settings' => $base_button + array(
        '#type' => 'submit',
        '#name' => 'sharerich_formatter_settings_cancel',
        '#value' => t('Cancel'),
        '#op' => 'cancel',
        // Do not check errors for the 'Cancel' button, but make sure we
        // get the value of the 'formatter type' select.
        '#limit_validation_errors' => array(array('fields', 'sharerich', 'type')),
        ),
      ),
    );
    $form['fields']['sharerich']['#attributes']['class'][] = 'field-formatter-settings-editing';
  }
  elseif (variable_get('sharerich_node_' . $form['#bundle'], FALSE) && isset($form['#entity_type']) && in_array($form['#entity_type'], array('node'))) {

    $form['fields']['sharerich']['#region_callback'] = 'field_ui_display_overview_row_region';
    $form['fields']['sharerich']['settings_summary'] = array(
      '#markup' => '<div class="field-formatter-summary">' . sharerich_field_formatter_settings_summary($form, $summary) . '</div>',
      '#cell_attributes' => array('class' => array('field-formatter-summary-cell')),
    );
    $form['fields']['sharerich']['settings_edit'] = $base_button + array(
      '#type' => 'image_button',
      '#name' => 'sharerich_formatter_settings_edit',
      '#src' => 'misc/configure.png',
      '#attributes' => array('class' => array('field-formatter-settings-edit'), 'alt' => t('Edit')),
      '#op' => 'edit',
      // Do not check errors for the 'Edit' button, but make sure we get
      // the value of the 'formatter type' select.
      '#limit_validation_errors' => array(array('fields', 'sharerich', 'type')),
      '#prefix' => '<div class="field-formatter-settings-edit-wrapper">',
      '#suffix' => '</div>',
    );
  }
  if (!isset($form_state['formatter_settings']['sharerich']) || (isset($form_state['formatter_settings']['sharerich']) && empty($form_state['formatter_settings']['sharerich']))) {
    $bundle_settings = field_bundle_settings($form['#entity_type'], $form['#bundle']);
    if (isset($bundle_settings['extra_fields']['display']['sharerich'][$form['#view_mode']]['settings'])) {
      $form_state['formatter_settings']['sharerich'] = $bundle_settings['extra_fields']['display']['sharerich'][$form['#view_mode']]['settings'];
    }
    else {
      $display_defaults = sharerich_field_extra_fields(TRUE);
      $form_state['formatter_settings']['sharerich'] = $display_defaults['extra_fields']['display']['sharerich']['settings'];
    }
  }

  $form['#submit'][] = '_sharerich_display_overview_form_submit';
}

/**
 * Pseudo hook_field_formatter_settings_form().
 */
function sharerich_field_formatter_settings_form($build, $summary = NULL) {

  $display_stored = field_bundle_settings($build['#entity_type'], $build['#bundle']);
  if (!empty($summary)) {
    $display['settings'] = $summary;
  }
  elseif (isset($display_stored['extra_fields']['display']['sharerich'][$build['#view_mode']])) {
    $display = $display_stored['extra_fields']['display']['sharerich'][$build['#view_mode']];
  }
  else {
    $display_defaults = sharerich_field_extra_fields(TRUE);
    $display = $display_defaults['extra_fields']['display']['sharerich'];
  }

  $form['sharerich_widgets'] = array(
    '#type' => 'select',
    '#title' => t('Sharerich widget'),
    '#default_value' => !empty($display['settings']['sharerich_widgets']) ? $display['settings']['sharerich_widgets'] : '',
    '#options' => _sharerich_get_widget_list(),
    '#description' => t('Note: Disabled widgets are not listed.'),
  );

  return $form;
}

/**
 * Sharerich field_ui_display_overview_form submit handler.
 */
function _sharerich_display_overview_form_submit($form, &$form_state) {

  // Get current bundle settings.
  $bundle_settings = field_bundle_settings($form['#entity_type'], $form['#bundle']);
  $bundle_settings['extra_fields']['display']['sharerich'][$form['#view_mode']] = array(
    'settings' => $form_state['formatter_settings']['sharerich'],
    'weight' => $form_state['values']['fields']['sharerich']['weight'],
    'visible' => $form_state['values']['fields']['sharerich']['type'] == 'visible',
  );

  // Save updated bundle settings.
  field_bundle_settings($form['#entity_type'], $form['#bundle'], $bundle_settings);
}

/**
 * Pseudo hook_field_formatter_settings_summary().
 */
function sharerich_field_formatter_settings_summary($build, $summary = NULL) {
  $display_stored = field_bundle_settings($build['#entity_type'], $build['#bundle']);

  if (!empty($summary)) {
    $display['settings'] = $summary;
  }
  elseif (isset($display_stored['extra_fields']['display']['sharerich'][$build['#view_mode']])) {
    $display = $display_stored['extra_fields']['display']['sharerich'][$build['#view_mode']];
  }
  else {
    $display_defaults = sharerich_field_extra_fields(TRUE);
    $display = $display_defaults['extra_fields']['display']['sharerich'];
  }

  $summary = array();
  if (!empty($display['settings']['sharerich_widgets'])) {
    $summary[] = t('Sharerich widget') . ': ' . $display['settings']['sharerich_widgets'];
  }
  else {
    $summary[] = t('No widget selected.');
  }


  return implode('<br />', $summary);
}

/**
 * Helper function for grabbing Sharerich widget list.
 */
function _sharerich_get_widget_list() {
  $widgets = &drupal_static(__FUNCTION__);

  if (!isset($widgets)) {
    $widgets_all = sharerich_widget_load_all();
    $widgets = !empty($widgets_all) ? drupal_map_assoc(array_keys($widgets_all)) : array(0 => 'None');
  }
  return $widgets;
}
