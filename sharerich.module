<?php
/**
 * @file
 * Module file for Sharerich.
 */

/**
 * Implements hook_menu().
 */
function sharerich_menu() {
  $items['admin/config/user-interface/sharerich'] = array(
    'title' => 'Sharerich',
    'description' => t('Configure the Sharerich to select which social buttons you would like to enable.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sharerich_admin_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer sharerich'),
    'file' => 'sharerich.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function sharerich_permission() {
  return array(
    'administer sharerich' => array(
      'title' => t('Administer Sharerich'),
      'description' => t('Permission to allow user to configure Sharerich.'),
      'restrict access' => TRUE,
    ),
  );
}


/**
 * Implements hook_block_info().
 */
function sharerich_block_info() {
  $blocks['sharerich'] = array(
    'info' => t('Sharerich'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function sharerich_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'sharerich':
      $block['subject'] = t('Share this');
      $block['content'] = array(
        '#markup' => sharerich_get_buttons(),
      );
  }
  return $block;
}

/**
 * Returns markup with list of share buttons.
 */
function sharerich_get_buttons() {
  foreach (variable_get('sharerich_services', array()) as $service_name) {
    if (!empty(variable_set('sharerich_custom_' . $service_name, ''))) {
      $content = variable_set('sharerich_custom_' . $service_name);
    }
    else {
      $content = sharerich_load_service($service_name);
    }
    // Tokens replacement.
    $buttons[$service_name] = token_replace($content, array($node));
  }

  $items = array();
  $defaults = array('email', 'facebook', 'linkedin', 'twitter', 'googleplus', 'pinterest');
  $services = variable_get('sharerich_services', $defaults);
  foreach ($services as $key => $value) {
    if ($value) {
      // Allow other modules to alter the buttons markup.
      drupal_alter('sharerich_buttons', $buttons);

      $items[] = array(
        'data' => $buttons[$value],
        'class' => array($key),
      );
    }
    else {
      continue;
    }
  }
  // temporary add js and css.
  // @todo move these to admin config
  drupal_add_css(libraries_get_path('sharerich') . '/css/sharerich.css');
  drupal_add_css(drupal_get_path('module','sharerich') . '/css/sharerich-overrides.css');
  drupal_add_js(libraries_get_path('sharerich') . '/js/sharerich.min.js', array('scope' => 'footer'));

  $attributes = array(
    'class' => array('sharerich-buttons', 'clearfix'),
  );
  return theme_item_list(array('items' => $items, 'title' => '', 'type' => 'ul', 'attributes' => $attributes));
}

/**
 * Helper to load services from the disk.
 */
function sharerich_load_service($service_name) {
  $dir = drupal_get_path('module','sharerich') . '/services';
  $service_name = $dir . '/' . $service_name . '.inc';
  if (file_exists($service_name)) {
    return file_get_contents($service_name);
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sharerich_form_node_type_form_alter(&$form, &$form_state) {
  $form['sharerich'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sharerich'),
    '#collapsible' => TRUE,
    '#group' => 'additional_settings',
    '#weight' => 20,
    '#attributes' => array(
      'class' => array('sharerich-node-type-settings-form'),
    ),
    '#access' => user_access('administer nodes'),
  );
  $entity_type = $form['#node_type']->type;
  $form['sharerich']['show'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Sharerich for this content type.'),
    '#default_value' => variable_get('sharerich_node_' . $entity_type, FALSE),
    '#suffix' => t('After enabling Sharerich you need to configure each display on Manage display tag.<br/>'.
      'Please visit the <a href="/admin/config/user-interface/sharerich">configuration page</a> to customize the share buttons.'),
  );
  $form['#submit'][] = 'sharerich_node_type_callback';
}

/**
 * Custom handler to save sharerich info.
 */
function sharerich_node_type_callback(&$form, &$form_state) {
  $entity_type = $form['#node_type']->type;
  $config = 'sharerich_node_' . $form_state['values']['type'];
  $form_value = $form_state['complete form']['sharerich']['show']['#value'];
  // When Sharerich is enabled for the first time on this content type, redirect to the display settings.
  if (empty(variable_get($config)) && $form_value == TRUE) {
    drupal_set_message(t('Please configure the field Sharerich for each Display.'));
    $form_state['redirect'] = 'admin/structure/types/manage/' . $entity_type . '/display';
  }
  variable_set($config, $form_value);
  field_info_cache_clear();
}


